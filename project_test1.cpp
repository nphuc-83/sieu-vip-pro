#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <string>
#include <cstdlib>
#include <ctime>
#include <stdexcept>


using namespace std;

// ===== ENUM =====
enum class UserRole { USER, ADMIN };

// ===== STRUCT V? =====
struct Wallet {
    string walletId;
    int balance = 0;
};

// ===== CLASS NGU?I D?NG =====
class UserAccount {
public:
    string username;
    string hashedPassword;
    string fullName;
    string email;
    string phone;
    bool isAutoGeneratedPassword;
    UserRole role;
    Wallet wallet;

    string toFileString() const {
        return username + "|" + hashedPassword + "|" + fullName + "|" + email + "|" + phone + "|" +
               (isAutoGeneratedPassword ? "1" : "0") + "|" +
               (role == UserRole::ADMIN ? "admin" : "user") + "|" +
               wallet.walletId + "|" + to_string(wallet.balance);
    }

    static UserAccount fromFileString(const string& line) {
        stringstream ss(line);
        string token;
        vector<string> tokens;

        while (getline(ss, token, '|')) {
            tokens.push_back(token);
        }

        if (tokens.size() < 9) {
            throw runtime_error("Invalid user data format");
        }

        UserAccount user;
        user.username = tokens[0];
        user.hashedPassword = tokens[1];
        user.fullName = tokens[2];
        user.email = tokens[3];
        user.phone = tokens[4];
        user.isAutoGeneratedPassword = (tokens[5] == "1");
        user.role = (tokens[6] == "admin") ? UserRole::ADMIN : UserRole::USER;
        user.wallet.walletId = tokens[7];
        user.wallet.balance = stoi(tokens[8]);

        return user;
    }
};

// ===== H?M TI?N ?CH =====
string fakeHash(const string& password) {
    return "HASH_" + password;
}

string generateRandomPassword(int length = 8) {
    const char charset[] = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    string result;
    for (int i = 0; i < length; ++i) {
        result += charset[rand() % (sizeof(charset) - 1)];
    }
    return result;
}

void saveUserToFile(const UserAccount& user) {
    ofstream out("users.txt", ios::app);
    if (out.is_open()) {
        out << user.toFileString() << "\n";
        out.close();
    }
}

bool userExists(const string& username) {
    ifstream in("users.txt");
    string line;
    while (getline(in, line)) {
        if (line.find(username + "|") == 0) return true;
    }
    return false;
}

void viewAllAccounts() {
    ifstream in("users.txt");
    if (!in.is_open()) {
        cout << "Khong the mo file users.txt!\n";
        return;
    }

    string line;
    int count = 0;
    cout << "===== DANH SACH TAI KHOAN =====\n";
    while (getline(in, line)) {
        try {
            UserAccount user = UserAccount::fromFileString(line);
            cout << "Username: " << user.username << " | Ho ten: " << user.fullName << endl;
            count++;
        } catch (...) {
            continue; // b? qua d?ng b? l?i
        }
    }

    if (count == 0)
        cout << "Khong co tai khoan nao!\n";

    in.close();
}

// ===== MAIN =====
int main() {
    srand(time(0));

    int choice;
    do {
        cout << "\n===== MENU =====\n";
        cout << "1. Dang ky tai khoan\n";
        cout << "2. Dang nhap\n";
        cout << "3. Thoat\n";
        cout << "4. Xoa tai khoan\n";
        cout << "5. Xem danh sach tai khoan\n";
        cout << "Chon: ";
        cin >> choice;
        cin.ignore();

        if (choice == 1) {
            UserAccount newUser;
            cout << "Nhap ten dang nhap: ";
            getline(cin, newUser.username);

            if (userExists(newUser.username)) {
                cout << "Tai khoan da ton tai!\n";
                continue;
            }

            cout << "Nhap ho ten: ";
            getline(cin, newUser.fullName);
            cout << "Nhap email: ";
            getline(cin, newUser.email);
            cout << "Nhap so dien thoai: ";
            getline(cin, newUser.phone);

            string password;
            cout << "Nhap mat khau: ";
            getline(cin, password);

            if (password.empty()) {
                password = generateRandomPassword();
                newUser.isAutoGeneratedPassword = true;
                cout << "Mat khau tu sinh: " << password << "\n";
            } else {
                newUser.isAutoGeneratedPassword = false;
            }

            newUser.hashedPassword = fakeHash(password);
            newUser.role = UserRole::USER;
            newUser.wallet.walletId = newUser.username + "_WALLET";
            newUser.wallet.balance = 100000;

            saveUserToFile(newUser);
            cout << "Dang ky thanh cong!\n";
            cout << "Thong tin vi:\n";
            cout << "Ma vi: " << newUser.wallet.walletId << "\n";
            cout << "So du: " << newUser.wallet.balance << " diem\n";
        }

        else if (choice == 2) {
            string username, password;
            cout << "Nhap ten dang nhap: ";
            getline(cin, username);
            cout << "Nhap mat khau: ";
            getline(cin, password);

            ifstream in("users.txt");
            string line;
            bool found = false;
            while (getline(in, line)) {
                try {
                    UserAccount user = UserAccount::fromFileString(line);
                    if (user.username == username && user.hashedPassword == fakeHash(password)) {
                        cout << "Dang nhap thanh cong!\n";
                        cout << "Xin chao: " << user.fullName << "\n";
                        cout << "Vi: " << user.wallet.walletId << " | So du: " << user.wallet.balance << " diem\n";
                        found = true;
                        break;
                    }
                } catch (...) {
                    continue;
                }
            }
            if (!found) {
                cout << "Dang nhap that bai. Sai ten dang nhap hoac mat khau.\n";
            }
        }

        else if (choice == 4) {
            string username, password;
            cout << "Nhap ten dang nhap: ";
            getline(cin, username);
            cout << "Nhap mat khau: ";
            getline(cin, password);

            ifstream in("users.txt");
            vector<string> allLines;
            string line;
            bool deleted = false;

            while (getline(in, line)) {
                try {
                    UserAccount user = UserAccount::fromFileString(line);
                    if (user.username == username && user.hashedPassword == fakeHash(password)) {
                        deleted = true;
                        continue;
                    }
                    allLines.push_back(line);
                } catch (...) {
                    continue;
                }
            }
            in.close();

            if (deleted) {
                ofstream out("users.txt", ios::trunc);
                for (const string& l : allLines) {
                    out << l << "\n";
                }
                out.close();
                cout << "Da xoa tai khoan thanh cong!\n";
            } else {
                cout << "Ten dang nhap hoac mat khau sai. Khong the xoa.\n";
            }
        }

        else if (choice == 5) {
            viewAllAccounts();
        }

    } while (choice != 3);

    return 0;
}


